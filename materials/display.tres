[gd_resource type="ShaderMaterial" load_steps=46 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "Duration"
hint = 2
min = 0.25
max = 32.0
step = 0.25

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorScalarMix" id=14]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 2, 2 ), 2, 0.5 ]

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 32, 7, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=16]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 0 ) ]
operator = 4

[sub_resource type="VisualShaderNodeVectorOp" id=17]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorFunc" id=18]
function = 6

[sub_resource type="VisualShaderNodeVectorDecompose" id=19]

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 6

[sub_resource type="VisualShaderNodeScalarOp" id=21]
default_input_values = [ 0, 0.4, 1, 10.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 1.0, 1, 6.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=23]
default_input_values = [ 0, 1.0, 1, 6.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=24]

[sub_resource type="VisualShaderNodeScalarOp" id=25]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 4

[sub_resource type="VisualShaderNodeCompare" id=26]
default_input_values = [ 0, 0.0, 1, 0.5, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=27]
default_input_values = [ 0, 1.0, 1, 6.0 ]
operator = 2

[sub_resource type="VisualShaderNodeCompare" id=28]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 0.5 ]
function = 5

[sub_resource type="VisualShaderNodeCompare" id=29]
default_input_values = [ 0, 0.0, 1, 0.5, 2, 0.5 ]

[sub_resource type="VisualShaderNodeCompare" id=30]
default_input_values = [ 0, 0.0, 1, 2.5, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=31]
default_input_values = [ 0, 0.0, 1, 8.0 ]
operator = 4

[sub_resource type="VisualShaderNodeScalarOp" id=33]
default_input_values = [ 0, 1.0, 1, 3.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=34]
default_input_values = [ 0, 1.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=35]
default_input_values = [ 0, 1.0, 1, 0.75 ]

[sub_resource type="VisualShaderNodeScalarOp" id=36]
default_input_values = [ 0, 1.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeCompare" id=37]
default_input_values = [ 0, 0.0, 1, 3.5, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=38]
default_input_values = [ 0, 1.0, 1, 6.0 ]
operator = 2

[sub_resource type="VisualShaderNodeCompare" id=39]
default_input_values = [ 0, 0.0, 1, 4.5, 2, 0.5 ]

[sub_resource type="VisualShaderNodeCompare" id=40]
default_input_values = [ 0, 0.0, 1, 6.5, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=41]
default_input_values = [ 0, 1.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=42]
default_input_values = [ 0, 1.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=43]
default_input_values = [ 0, 1.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=44]
default_input_values = [ 0, 1.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=45]
default_input_values = [ 0, 0.0, 1, 8.0 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=46]
uniform_name = "Start"
hint = 2
min = 0.25
max = 32.0
step = 0.25

[sub_resource type="VisualShaderNodeScalarOp" id=47]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=48]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=49]
default_input_values = [ 0, 0.5, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=50]
default_input_values = [ 0, 0.0, 1, -0.25 ]

[sub_resource type="VisualShaderNodeScalarOp" id=51]
default_input_values = [ 0, -0.25, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=52]
default_input_values = [ 0, 0.0, 1, 0.25 ]

[sub_resource type="VisualShaderNodeScalarSwitch" id=53]
default_input_values = [ 0, false, 1, 2.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=54]
default_input_values = [ 0, 0.0, 1, 4.0 ]
operator = 3

[sub_resource type="VisualShaderNodeCompare" id=55]
default_input_values = [ 0, 0.0, 1, 16.0, 2, 1e-05 ]
function = 2

[sub_resource type="VisualShader" id=1]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible, unshaded;

uniform float Duration : hint_range(0.25, 32, 0.25);
uniform float Start : hint_range(0.25, 32, 0.25);



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorOp:17
	vec3 n_in17p1 = vec3(32.00000, 7.00000, 0.00000);
	vec3 n_out17p0 = n_out2p0 * n_in17p1;

// VectorOp:18
	vec3 n_in18p1 = vec3(1.00000, 1.00000, 0.00000);
	vec3 n_out18p0 = mod(n_out17p0, n_in18p1);

// VectorOp:19
	vec3 n_in19p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out19p0 = n_out18p0 - n_in19p1;

// VectorFunc:20
	vec3 n_out20p0 = abs(n_out19p0);

// VectorDecompose:21
	float n_out21p0 = n_out20p0.x;
	float n_out21p1 = n_out20p0.y;
	float n_out21p2 = n_out20p0.z;

// ScalarOp:22
	float n_out22p0 = max(n_out21p0, n_out21p1);

// ScalarOp:23
	float n_in23p0 = 0.40000;
	float n_out23p0 = n_in23p0 - n_out22p0;

// ScalarOp:24
	float n_in24p1 = 6.00000;
	float n_out24p0 = n_out23p0 * n_in24p1;

// VectorDecompose:26
	float n_out26p0 = n_out17p0.x;
	float n_out26p1 = n_out17p0.y;
	float n_out26p2 = n_out17p0.z;

// ScalarOp:27
	float n_in27p1 = 1.00000;
	float n_out27p0 = mod(n_out26p0, n_in27p1);

// Compare:28
	float n_in28p1 = 0.50000;
	float n_in28p2 = 0.50000;
	bool n_out28p0 = (abs(n_out27p0 - n_in28p1) < n_in28p2);
// ScalarUniform:11
	float n_out11p0 = Duration;

// Compare:57
	float n_in57p1 = 16.00000;
	bool n_out57p0 = n_out11p0>n_in57p1;

// ScalarSwitch:55
	float n_in55p1 = 2.00000;
	float n_in55p2 = 1.00000;
	float n_out55p0;
	if(n_out57p0)
	{
		n_out55p0 = n_in55p1;
	}
	else
	{
		n_out55p0 = n_in55p2;
	}

// ScalarOp:56
	float n_out56p0 = n_out11p0 / n_out55p0;

// ScalarOp:12
	float n_in12p1 = 2.00000;
	float n_out12p0 = n_out56p0 * n_in12p1;

// Compare:30
	bool n_out30p0 = n_out26p0<=n_out12p0;

// ScalarOp:29
	float n_out29p0 = (n_out28p0 ? 1.0 : 0.0) * (n_out30p0 ? 1.0 : 0.0);

// ScalarOp:54
	float n_in54p1 = 0.25000;
	float n_out54p0 = n_out26p0 + n_in54p1;

// ScalarOp:53
	float n_in53p0 = -0.25000;
	float n_out53p0 = n_in53p0 * n_out55p0;

// ScalarOp:52
	float n_out52p0 = n_out54p0 + n_out53p0;

// ScalarOp:50
	float n_out50p0 = n_out52p0 * n_out55p0;

// ScalarUniform:48
	float n_out48p0 = Start;

// ScalarOp:49
	float n_in49p1 = 2.00000;
	float n_out49p0 = n_out48p0 * n_in49p1;

// ScalarOp:47
	float n_out47p0 = n_out50p0 + n_out49p0;

// ScalarOp:33
	float n_in33p1 = 8.00000;
	float n_out33p0 = mod(n_out47p0, n_in33p1);

// ScalarOp:51
	float n_in51p0 = 0.50000;
	float n_out51p0 = n_in51p0 * n_out55p0;

// Compare:31
	float n_in31p1 = 0.50000;
	bool n_out31p0 = (abs(n_out33p0 - n_in31p1) < n_out51p0);
// ScalarOp:35
	float n_in35p1 = 3.00000;
	float n_out35p0 = (n_out31p0 ? 1.0 : 0.0) * n_in35p1;

// Compare:32
	float n_in32p1 = 2.50000;
	bool n_out32p0 = (abs(n_out33p0 - n_in32p1) < n_out51p0);
// ScalarOp:36
	float n_in36p1 = 1.00000;
	float n_out36p0 = (n_out32p0 ? 1.0 : 0.0) * n_in36p1;

// ScalarOp:37
	float n_out37p0 = n_out35p0 + n_out36p0;

// Compare:41
	float n_in41p1 = 4.50000;
	bool n_out41p0 = (abs(n_out33p0 - n_in41p1) < n_out51p0);
// ScalarOp:43
	float n_in43p1 = 2.00000;
	float n_out43p0 = (n_out41p0 ? 1.0 : 0.0) * n_in43p1;

// Compare:42
	float n_in42p1 = 6.50000;
	bool n_out42p0 = (abs(n_out33p0 - n_in42p1) < n_out51p0);
// ScalarOp:44
	float n_in44p1 = 1.00000;
	float n_out44p0 = (n_out42p0 ? 1.0 : 0.0) * n_in44p1;

// ScalarOp:45
	float n_out45p0 = n_out43p0 + n_out44p0;

// ScalarOp:38
	float n_out38p0 = n_out37p0 + n_out45p0;

// ScalarOp:46
	float n_in46p1 = 0.50000;
	float n_out46p0 = n_out38p0 + n_in46p1;

// Compare:39
	float n_in39p1 = 3.50000;
	bool n_out39p0 = (abs(n_out26p1 - n_in39p1) < n_out46p0);
// ScalarOp:40
	float n_out40p0 = n_out29p0 * (n_out39p0 ? 1.0 : 0.0);

// ScalarOp:25
	float n_out25p0 = n_out24p0 * n_out40p0;

// VectorScalarMix:16
	vec3 n_in16p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in16p1 = vec3(0.50000, 2.00000, 2.00000);
	vec3 n_out16p0 = mix(n_in16p0, n_in16p1, n_out25p0);

// Output:0
	ALBEDO = n_out16p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -658.929, 647.643 )
flags/unshaded = true
nodes/fragment/0/position = Vector2( 2400, 40 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 20, 40 )
nodes/fragment/11/node = SubResource( 9 )
nodes/fragment/11/position = Vector2( -1100, 200 )
nodes/fragment/12/node = SubResource( 10 )
nodes/fragment/12/position = Vector2( 1220, 280 )
nodes/fragment/16/node = SubResource( 14 )
nodes/fragment/16/position = Vector2( 2200, 40 )
nodes/fragment/17/node = SubResource( 15 )
nodes/fragment/17/position = Vector2( 220, 20 )
nodes/fragment/18/node = SubResource( 16 )
nodes/fragment/18/position = Vector2( 420, 20 )
nodes/fragment/19/node = SubResource( 17 )
nodes/fragment/19/position = Vector2( 620, 20 )
nodes/fragment/20/node = SubResource( 18 )
nodes/fragment/20/position = Vector2( 800, 40 )
nodes/fragment/21/node = SubResource( 19 )
nodes/fragment/21/position = Vector2( 1000, 40 )
nodes/fragment/22/node = SubResource( 20 )
nodes/fragment/22/position = Vector2( 1220, 40 )
nodes/fragment/23/node = SubResource( 21 )
nodes/fragment/23/position = Vector2( 1420, 40 )
nodes/fragment/24/node = SubResource( 22 )
nodes/fragment/24/position = Vector2( 1620, 40 )
nodes/fragment/25/node = SubResource( 23 )
nodes/fragment/25/position = Vector2( 2020, 40 )
nodes/fragment/26/node = SubResource( 24 )
nodes/fragment/26/position = Vector2( -480, 720 )
nodes/fragment/27/node = SubResource( 25 )
nodes/fragment/27/position = Vector2( 1220, 160 )
nodes/fragment/28/node = SubResource( 26 )
nodes/fragment/28/position = Vector2( 1420, 160 )
nodes/fragment/29/node = SubResource( 27 )
nodes/fragment/29/position = Vector2( 1620, 160 )
nodes/fragment/30/node = SubResource( 28 )
nodes/fragment/30/position = Vector2( 1420, 340 )
nodes/fragment/31/node = SubResource( 29 )
nodes/fragment/31/position = Vector2( 820, 520 )
nodes/fragment/32/node = SubResource( 30 )
nodes/fragment/32/position = Vector2( 820, 700 )
nodes/fragment/33/node = SubResource( 31 )
nodes/fragment/33/position = Vector2( 500, 800 )
nodes/fragment/35/node = SubResource( 33 )
nodes/fragment/35/position = Vector2( 1020, 520 )
nodes/fragment/36/node = SubResource( 34 )
nodes/fragment/36/position = Vector2( 1020, 700 )
nodes/fragment/37/node = SubResource( 35 )
nodes/fragment/37/position = Vector2( 1220, 580 )
nodes/fragment/38/node = SubResource( 36 )
nodes/fragment/38/position = Vector2( 1400, 620 )
nodes/fragment/39/node = SubResource( 37 )
nodes/fragment/39/position = Vector2( 1640, 520 )
nodes/fragment/40/node = SubResource( 38 )
nodes/fragment/40/position = Vector2( 1820, 160 )
nodes/fragment/41/node = SubResource( 39 )
nodes/fragment/41/position = Vector2( 820, 880 )
nodes/fragment/42/node = SubResource( 40 )
nodes/fragment/42/position = Vector2( 820, 1060 )
nodes/fragment/43/node = SubResource( 41 )
nodes/fragment/43/position = Vector2( 1020, 880 )
nodes/fragment/44/node = SubResource( 42 )
nodes/fragment/44/position = Vector2( 1020, 1060 )
nodes/fragment/45/node = SubResource( 43 )
nodes/fragment/45/position = Vector2( 1220, 960 )
nodes/fragment/46/node = SubResource( 44 )
nodes/fragment/46/position = Vector2( 1600, 700 )
nodes/fragment/47/node = SubResource( 45 )
nodes/fragment/47/position = Vector2( 300, 800 )
nodes/fragment/48/node = SubResource( 46 )
nodes/fragment/48/position = Vector2( -160, 1080 )
nodes/fragment/49/node = SubResource( 47 )
nodes/fragment/49/position = Vector2( 120, 1020 )
nodes/fragment/50/node = SubResource( 48 )
nodes/fragment/50/position = Vector2( 120, 800 )
nodes/fragment/51/node = SubResource( 49 )
nodes/fragment/51/position = Vector2( 320, 920 )
nodes/fragment/52/node = SubResource( 50 )
nodes/fragment/52/position = Vector2( -60, 800 )
nodes/fragment/53/node = SubResource( 51 )
nodes/fragment/53/position = Vector2( -260, 940 )
nodes/fragment/54/node = SubResource( 52 )
nodes/fragment/54/position = Vector2( -240, 800 )
nodes/fragment/55/node = SubResource( 53 )
nodes/fragment/55/position = Vector2( -320, 340 )
nodes/fragment/56/node = SubResource( 54 )
nodes/fragment/56/position = Vector2( 840, 180 )
nodes/fragment/57/node = SubResource( 55 )
nodes/fragment/57/position = Vector2( -540, 300 )
nodes/fragment/connections = PoolIntArray( 2, 0, 17, 0, 17, 0, 18, 0, 18, 0, 19, 0, 19, 0, 20, 0, 20, 0, 21, 0, 21, 0, 22, 0, 21, 1, 22, 1, 22, 0, 23, 1, 23, 0, 24, 0, 16, 0, 0, 0, 24, 0, 25, 0, 25, 0, 16, 2, 17, 0, 26, 0, 26, 0, 27, 0, 27, 0, 28, 0, 28, 0, 29, 0, 26, 0, 30, 0, 12, 0, 30, 1, 30, 0, 29, 1, 31, 0, 35, 0, 32, 0, 36, 0, 35, 0, 37, 0, 36, 0, 37, 1, 37, 0, 38, 0, 26, 1, 39, 0, 29, 0, 40, 0, 40, 0, 25, 1, 39, 0, 40, 1, 33, 0, 32, 0, 41, 0, 43, 0, 42, 0, 44, 0, 33, 0, 41, 0, 33, 0, 42, 0, 43, 0, 45, 0, 44, 0, 45, 1, 45, 0, 38, 1, 38, 0, 46, 0, 46, 0, 39, 2, 48, 0, 49, 0, 33, 0, 31, 0, 51, 0, 31, 2, 51, 0, 32, 2, 51, 0, 41, 2, 51, 0, 42, 2, 52, 0, 50, 0, 53, 0, 52, 1, 54, 0, 52, 0, 55, 0, 53, 1, 55, 0, 50, 1, 55, 0, 51, 1, 11, 0, 56, 0, 56, 0, 12, 0, 55, 0, 56, 1, 11, 0, 57, 0, 57, 0, 55, 0, 50, 0, 47, 0, 47, 0, 33, 0, 26, 0, 54, 0, 49, 0, 47, 1 )

[resource]
shader = SubResource( 1 )
shader_param/Duration = 4.0
shader_param/Start = null
